Dockerize BOTH apps - the Python and the Node app.

1) Create appropriate images for both apps (two separate images!).
HINT: Have a brief look at the app code to configure your images correctly!

node-app:
docker build .

python-app:
docker build .

2) Launch a container for each created image, making sure, 
that the app inside the container works correctly and is usable.

node-app:
docker run -p 3000:3000 f0701d34ca26

python-app:
docker run -i 9dd45ac3deed

3) Re-create both containers and assign names to both containers.
Use these names to stop and restart both containers.

node-app:
docker stop f0701d34ca26
docker run --name node-app-assigment-1 -p 3000:3000 f0701d34ca26
docker stop node-app-assigment-1
docker start node-app-assigment-1

python-app:
docker stop 9dd45ac3deed
docker run --name python-app-assigment-1 -i 9dd45ac3deed
docker stop python-app-assigment-1
docker start -ia python-app-assigment-1

4) Clean up (remove) all stopped (and running) containers, 
clean up all created images.

docker container prune
docker image rm 9dd45ac3deed 85b3467afcde f0701d34ca26

5) Re-build the images - this time with names and tags assigned to them.

node-app:
docker build --tag node-app-assignment-1:latest .

python-app:
docker build --tag python-app-assignment-1:latest .

6) Run new containers based on the re-built images, ensuring that the containers
are removed automatically when stopped.

node-app:
docker run --name node-app-assigment-1 -p 3000:3000 --rm node-app-assignment-1:latest

python-app:
docker run --name python-app-assigment-1 -i --rm python-app-assignment-1:latest